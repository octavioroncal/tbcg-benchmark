[module FormGenerator('http://www.example.com/form')]

[template public generate(form : Form)]
[comment @main/]
[file (form.className.concat('.java'), false, 'UTF-8')]
public class [form.className] {

    [for (field : form.fields)]
    private [field.type] [field.name];
    [/for]

    [for (subform : form.subforms)]
    private [subform.className] [subform.className.toLowerFirst()];
    [/for]

    public [form.className]() {
        [for (field : form.fields)]
        this.[field.name] = [defaultValue(field)];
        [/for]
    }

    [for (field : form.fields)]
    public [field.type] get[field.name.toUpperFirst()]() {
        return [field.name];
    }

    public void set[field.name.toUpperFirst()]([field.type] [field.name]) {
        this.[field.name] = [field.name];
    }
    [/for]

    [for (subform : form.subforms)]
    public [subform.className] get[subform.className.toUpperFirst()]() {
        return [subform.className.toLowerFirst()];
    }

    public void set[subform.className.toUpperFirst()]([subform.className] [subform.className.toLowerFirst()]) {
        this.[subform.className.toLowerFirst()] = [subform.className.toLowerFirst()];
    }

    [generateSubform(subform)/]
    [/for]
    public void printFormDetails() {
		System.out.println("Form Details:");
		[for (field : form.fields)]
		System.out.println("[field.name] (type: [field.type]): " + this.[field.name]);
		[/for]

		[for (subform : form.subforms)]
		if (this.[subform.className.toLowerFirst()] != null) {
			System.out.println("Subform: [subform.className]");
			this.[subform.className.toLowerFirst()].printFormDetails();
		}
		[/for]
	}

}
[/file]
[/template]

[template private generateSubform(subform : Form)]
[file (subform.className.concat('.java'), false, 'UTF-8')]
public class [subform.className] {

    [for (field : subform.fields)]
    private [field.type] [field.name];
    [/for]

    [for (nested : subform.subforms)]
    private [nested.className] [nested.className.toLowerFirst()];
    [/for]

    public [subform.className]() {
        [for (field : subform.fields)]
        this.[field.name] = [defaultValue(field)];
        [/for]
    }

    [for (field : subform.fields)]
    public [field.type] get[field.name.toUpperFirst()]() {
        return [field.name];
    }

    public void set[field.name.toUpperFirst()]([field.type] [field.name]) {
        this.[field.name] = [field.name];
    }
    [/for]

    [for (nested : subform.subforms)]
    public [nested.className] get[nested.className.toUpperFirst()]() {
        return [nested.className.toLowerFirst()];
    }

    public void set[nested.className.toUpperFirst()]([nested.className] [nested.className.toLowerFirst()]) {
        this.[nested.className.toLowerFirst()] = [nested.className.toLowerFirst()];
    }

    [generateSubform(nested)/]
    [/for]

     public void printFormDetails() {
		System.out.println("Form Details:");
		[for (field : subform.fields)]
		System.out.println("[field.name] (type: [field.type]): " + this.[field.name]);
		[/for]

		[for (nested : subform.subforms)]
		if (this.[nested.className.toLowerFirst()] != null) {
			System.out.println("Subform: [nested.className]");
			this.[nested.className.toLowerFirst()].printFormDetails();
		}
		[/for]
	}
}
[/file]
[/template]
[template private defaultValue(field : Field)]
	[switch (field.type)]
		[case ("String")] "[field.defaultValue/]"[/case]
		[case ("int")] [field.defaultValue/] [/case]
		[default] new [field.type]() [/default]
	[/switch]
[/template]